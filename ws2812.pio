.pio_version 0 // only requires PIO version 0

.program tarefa_UART_SPI_I2C
.side_set 1

.define public T1 3
.define public T2 3
.define public T3 4

.wrap_target
bitloop:
    out x, 1       side 0 [T3 - 1] 
    jmp !x do_zero side 1 [T1 - 1] 
do_one:
    jmp  bitloop   side 1 [T2 - 1] 
do_zero:
    nop            side 0 [T2 - 1] 
.wrap


% c-sdk {
#include "hardware/clocks.h"

static inline void tarefa_UART_SPI_I2C_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) {

    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);

     // Program configuration.
  pio_sm_config c = tarefa_UART_SPI_I2C_program_get_default_config(offset);
  sm_config_set_sideset_pins(&c, pin); // Uses sideset pins.
  sm_config_set_out_shift(&c, true, true, 8); // 8 bit transfers, right-shift.
  sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX); // Use only TX FIFO.
  float prescaler = clock_get_hz(clk_sys) / (10.f * freq); // 10 cycles per transmission, freq is frequency of encoded bits.
  sm_config_set_clkdiv(&c, prescaler);

    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}
%}

